
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import EDD.ABB_Capas;
import EDD.NodoABB;
import EDD.Matriz;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parserc extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parserc() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parserc(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parserc(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\005\002\000\002\003\007\000\002\006\002" +
    "\000\002\004\012\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\002\uffff\004\004\001\002\000\004\010" +
    "\011\001\002\000\006\002\uffff\004\004\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\002" +
    "\000\001\002\000\006\004\ufffe\011\ufffe\001\002\000\006" +
    "\004\013\011\ufffa\001\002\000\004\007\016\001\002\000" +
    "\004\011\015\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\004\017\001\002\000\004\007\020\001\002\000" +
    "\004\005\021\001\002\000\004\006\022\001\002\000\006" +
    "\004\ufffc\011\ufffc\001\002\000\006\004\013\011\ufffa\001" +
    "\002\000\004\011\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\006\002\007\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\011\001" +
    "\001\000\004\004\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\022" +
    "\001\001\000\004\004\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parserc$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parserc$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parserc$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



ABB_Capas arbol;
Matriz m;
int id;
public void insertABB(ABB_Capas arbol){
    this.arbol = arbol; 
}


public void syntax_error(Symbol s)
{
System.err.println("El analizador se recupero tras el error\nError en la Línea" + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido." );
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de
errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.err.println("El analizador No se recupero tras el error\nError en la Línea" + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
s.value + " no reconocido.");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parserc$actions {
  private final Parserc parser;

  /** Constructor */
  CUP$Parserc$actions(Parserc parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parserc$do_action_part00000000(
    int                        CUP$Parserc$act_num,
    java_cup.runtime.lr_parser CUP$Parserc$parser,
    java.util.Stack            CUP$Parserc$stack,
    int                        CUP$Parserc$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parserc$result;

      /* select the action based on the action number */
      switch (CUP$Parserc$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).value;
		RESULT = start_val;
              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)), ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parserc$parser.done_parsing();
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CAPA INICIO 
            {
              Object RESULT =null;

              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)), ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).value;
id = Integer.parseInt(a); m = new Matriz(id);
              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CAPA ::= entero lla NT$0 CUERPO llc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-4)).value;
		arbol.insertar(new NodoABB(m));
              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("CAPA",1, ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-4)), ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).value;

                try{
                    int ma = Integer.parseInt(a);
                    int mb = Integer.parseInt(b);
                    if(c=="") m.insertar(ma,mb,"#FFFFFF");
                    else m.insertar(ma,mb,c);
                }catch(Exception e){
                    System.out.println("Error al cargar una fila");
                }
                
              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("NT$1",4, ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= entero c entero c color pc NT$1 CUERPO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parserc$stack.elementAt(CUP$Parserc$top-3)).value;

              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parserc$stack.elementAt(CUP$Parserc$top-7)), ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Parserc$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$Parserc$stack.peek()), RESULT);
            }
          return CUP$Parserc$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parserc$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parserc$do_action(
    int                        CUP$Parserc$act_num,
    java_cup.runtime.lr_parser CUP$Parserc$parser,
    java.util.Stack            CUP$Parserc$stack,
    int                        CUP$Parserc$top)
    throws java.lang.Exception
    {
              return CUP$Parserc$do_action_part00000000(
                               CUP$Parserc$act_num,
                               CUP$Parserc$parser,
                               CUP$Parserc$stack,
                               CUP$Parserc$top);
    }
}

}
